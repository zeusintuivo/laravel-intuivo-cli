<?php

use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;

use Symfony\Component\Console\Output\ConsoleOutput;
use Symfony\Component\Console\Output\Output;

use {{appName}}\Models\Traits\ModelProviderDatas;

use {{appName}}\Models\{{dir}}\{{file}};

/**
 * Migration created for {{appName}}\Models\{{dir}}\{{file}}
 *
 * @author {{author}}
 * @version {{version}}
 */
class Create{{file_plural}}Table  extends Migration {

	use ModelProviderDatas;

	private $rev = '7';
	private $currenttable = '{{table}}';


	/**
	 * Run the migrations.
	 *
	 * @author {{author}}
	 * @return void
	 */
	public function up()
	{

		$output = new ConsoleOutput();

        $output->writeln('<info>'.$this->currenttable.'</info> migration start.');

		DB::statement('SET FOREIGN_KEY_CHECKS = 0');
		Schema::dropIfExists($this->currenttable);
		DB::statement('SET FOREIGN_KEY_CHECKS = 1');
		Schema::create($this->currenttable, function(Blueprint $table)
		{
			$table->engine = 'InnoDB';
			$table->increments('id')->unsigned()->unique();
			$table->string('name');
			//
			//
			// Reponsibilities
			//
			//

			//student id person _id
			$table->integer('patient_id')->unsigned()->nullable();
			$table->foreign('patient_id')->references('id')->on('people');
			$table->index(['patient_id', 'id']);

			//nurse, teacher id, linked to a person
			$table->integer('open_by_id')->unsigned()->nullable();
			$table->foreign('open_by_id')->references('id')->on('people');
			$table->timestamp("open_at");

			//nurse, teacher id, linked to a person
			$table->integer('closed_by_id')->unsigned()->nullable();
			$table->foreign('closed_by_id')->references('id')->on('people');
			$table->timestamp("closed_at");

			//nurse, teacher id, linked to a person
			$table->integer('printed_by_id')->unsigned()->nullable();
			$table->foreign('printed_by_id')->references('id')->on('people');



			$table->timestamps();
			$table->softDeletes();
		});
	
		 $enabled = true;		
		     $max = env('SEED_MAX', 1200);
		$start_id = env('SEED_START_ID', 1000); //Leave first 1000 for options

		DB::statement( 'ALTER TABLE `'.$this->currenttable.'`  AUTO_INCREMENT = '.$start_id.';');



		if ($enabled) {
			$output->writeln('<info>'.$this->currenttable.' faker start. Generating.:'.($max-$start_id).' fields </info>');

			$faker = Faker\Factory::create();

            Eloquent::unguard(); //disable Model checks

			#
			# Foreign Values Load
			#

            $this->requirePeople();
            $this->requireParams();


			#
			# Four {{file}} per patient
 			#

			$max = $start_id + ( $this->patient_last_id - $this->patient_first_id );

			$onlyone_default = 0; //inverse switch to set one record as default;

			$index = $start_id;
			for($r=0;$r<4;++$r){ //make at least 3 alets per patient
				$output->writeln('<info>'.$this->currenttable.' faker start. Generating.:'.($max-$start_id).' fields </info>');
				$counter = 0;
				foreach($this->patient_ids as $patient_id) { //scroll all patient items(patient ids) to provide one to each
					$counter++;
					$index++;

					#
					# Foreign Values Pick
					#

	                $this->pickPeople();
	                $this->pickParams();


					# Override real value of with looping serial
					$this->currenttime = Carbon\Carbon::now();

                    #
                    # Entity asignation
                    #

                    {{file}}::create([
                            'id' => $index,
							'name' =>             $faker->name,

							//
							//
							// Reponsibilities
							//
							//
							'open_by_id' =>    	            $this->open_by_id,
							'open_at' =>       	            $this->open_at,

							'closed_by_id' =>  	            $this->closed_by_id,
							'closed_at' =>     	            $this->closed_at,

							'printed_by_id' => 	            $this->printed_by_id,
							'printed_at' =>    	            $this->printed_at,

							'patient_id' =>    	            $patient_id,

 
                            'created_at' => $currenttime,
                            'updated_at' => $currenttime
                     ]);


					//update Parent Resolve
					$person = Parent::find($patient_id);
					$person->{{filo}}_id = $index;
					$person->save();
					
					#
					# update next block
					#
					$start_id=$index;


				}	//end for each loop

				$onlyone_default++;
				$start_id++;

				//$start_id= $start_id+ ($person_last_id-$person_first_id)+1;
				$max =  $start_id+ $counter;
			} //end for loop

			
		} else {
            
            $output->writeln('<info>'.$this->currenttable.' direct statement </info>');
			DB::statement( "



			;");

		}//end if enabled

	
		DB::statement( 'ALTER TABLE `'.$this->currenttable.'`  AUTO_INCREMENT = '.($max + 1).';');


	}

	/**
	 * Reverse the migrations.
	 *
	 * @author {{author}}
	 * @return void
	 */
	public function down()
	{
		DB::statement('SET FOREIGN_KEY_CHECKS = 0');
		Schema::dropIfExists($this->currenttable);
		DB::statement('SET FOREIGN_KEY_CHECKS = 1');
	}

}
