<?php

use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;
use PHIWeb\PHIWebMigration;
use PHIWeb\ExtendedBlueprint;

use Symfony\Component\Console\Output\ConsoleOutput;
use Symfony\Component\Console\Output\Output;

use {{appName}}\Models\{{dir}}\{{file}};

/**
 * Migration created for {{appName}}\Models\{{dir}}\{{file}}
 *
 * @author {{author}}
 * @version {{version}}
 */
class Create{{file_plural}}Table  extends PHIWebMigration {

	private $rev = '{{version}}';
	private $currenttable = '{{table}}';

	/**
	 * Run the migrations.
	 *
	 * @author {{author}}
	 * @return void
	 */
	public function up()
	{
		parent::up();

		$output = new ConsoleOutput();

        $output->writeln('<info>'.$this->currenttable.'</info> migration start.');

        $this->down();
		// then create tables 
		$this->schema->create($this->currenttable, function(ExtendedBlueprint $table)
		{
 
			$table->engine = 'InnoDB';
			$table->increments('id')->unsigned()->unique();
			$table->string('name');
			//
			//
			// Reponsibilities
			//
			//

			//student id person _id
			$table->integer('patient_id')->unsigned()->nullable();
			$table->foreign('patient_id')->references('id')->on('people');
			$table->index(['patient_id', 'id']);

			//nurse, teacher id, linked to a person
			$table->integer('open_by_id')->unsigned()->nullable();
			$table->foreign('open_by_id')->references('id')->on('people');
			$table->timestamp("open_at");

			//nurse, teacher id, linked to a person
			$table->integer('closed_by_id')->unsigned()->nullable();
			$table->foreign('closed_by_id')->references('id')->on('people');
			$table->timestamp("closed_at");

			//nurse, teacher id, linked to a person
			$table->integer('printed_by_id')->unsigned()->nullable();
			$table->foreign('printed_by_id')->references('id')->on('people');

			$table->timestamps();
			$table->softDeletes();
		});
	
	

            //Leave first 1000 for options 
        DB::statement( 'ALTER TABLE `'.$this->currenttable.'`  AUTO_INCREMENT = 1000;');
        
        if (env('SEED_NOW', 'NO') == 'YES') {
            $m = new {{file}}Seeder();
            $m->run();  
        } else {
            $output->writeln('<info>'.$this->currenttable.' not seeding</info>SEED_NOW = NO');
        
        }

    } //end up()	

	/**
	 * Reverse the migrations.
	 *
	 * @author {{author}}
	 * @return void
	 */
	public function down()
	{
		DB::statement('SET FOREIGN_KEY_CHECKS = 0');
		Schema::dropIfExists($this->currenttable);
		DB::statement('SET FOREIGN_KEY_CHECKS = 1');
	}

}
