#!/usr/bin/env php
<?php
# @author Jesus Alcaraz <jesus@gammapartners.com>
#
# Procedural Programming to Create 
# Models, Migrations, Controllers, and Tests, 
# 
#


//
//
//
// Step 1 Check Arguments
//
//
//

# Before Loading anything Check Arguments Passed
# Get argv 

$db_targets=[ "tiny", "very-small", "small", "medium", "big"];
$db_target=$db_targets[1];  /// simple|softdelete
$USAGE= "
	Sample Usage:    - expects one argument
	    generateinserts [optional] 


	    [optional] can be:
	    	- " . implode("\n	    	- ", $db_targets) ."

	    	- ".$db_target." is default is ommited optional
";;

if (isset($argv[1]) ) {
	$db_target = trim($argv[1]);

	if (!in_array($db_target , $db_targets)) {
		echo  "\n \033[38;5;196m  -- Error Unknown Usage: ".$db_target ."\n";
		echo  " \033[38;5;226m ";
		die($USAGE."\n");
	}
}



$DBSQL = '../het2_rev5-6-'.$db_target.'.sql';
if(!file_exists($DBSQL) ) {
		echo  "\n \033[38;5;196m -- Cannot find  -- ".$DBSQL ."\n";
		echo  " \033[38;5;226m ";
		die($USAGE."\n");
}

include('generatebase');



			//
			// Read all table names from table                          ++++ READ TABLE FIELDS
			// 

			$table_list=@shell_exec('./showtableslist');
			$table_array = array();
			foreach ( explode("\n", $table_list) as $value) {
				$trim_value = trim($value);
				if (in_array(substr($trim_value , 0,8 ), ["","~", "column_n", "Warning:", "Tables_i", "+-------"])) {
					//
					// ignore list this
					//
				} else {
					$table_array[] = $trim_value;
				}
			}


#
#
#
#
# Creation Start
#
#
#
#

use Illuminate\Database\Capsule\Manager as DB;
use Illuminate\Support\Facades\Capsule;
use Illuminate\Database\Eloquent\Collection;

use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;

use PHIWeb\Models\Param\Param;
use PHIWeb\Models\Param\Location;
use Symfony\Component\Console\Output\ConsoleOutput;
use Symfony\Component\Console\Output\Output;

use Carbon\Carbon;
use Illuminate\Support\Facades\Hash;
// use PDO;


$DB = new DB;

$DB->addConnection([
    'driver'    => 'mysql',
    'host'      => $DB_HOST,
    'database'  => $DB_DATABASE,
    'username'  => $DB_USERNAME,
    'password'  => $DB_PASSWORD,
    'charset'   => 'utf8',
    'collation' => 'utf8_unicode_ci',
    'prefix'    => '',
]);

// Set the event dispatcher used by Eloquent models... (optional)
use Illuminate\Events\Dispatcher;
use Illuminate\Container\Container;
$DB->setEventDispatcher(new Dispatcher(new Container));

// Make this DB instance available globally via static methods... (optional)
$DB->setAsGlobal();

// Setup the Eloquent ORM... (optional; unless you've used setEventDispatcher())
$DB->bootEloquent();


$starttime = Carbon::now();


say($colors, "Start:", ""); 

$output = new ConsoleOutput();

#
# Produce Mirror Tables from Params for each category name
#
//CReate dirs incase they don't exist

if(!file_exists("database/inserts/".$db_target) ) {
	mkdir("database/inserts/".$db_target);
}
foreach ($table_array as $key => $value) {
		// DB::schema()->create('users', function($table)
		// {
		//     $table->increments('id');
		//     $table->string('email')->unique(); "
		//     $table->timestamps();
		// });

		$currenttable = $value;    // '.$currenttable.'
		#cat ../het2_rev5-6-very-small.sql  | grep "INSERT INTO \`daily_log_progress_comments\` VALUES " > database/inserts/very/daily_log_comments.sql
	say($colors, "Tablefile:", 'database/inserts/'.$db_target.'/'.$currenttable.'.sql'); 	
		say($colors, "\t\t\t".'cat ../het2_rev5-6-'.$db_target.'.sql  | grep "INSERT INTO \`'.$currenttable.'\` VALUES " > ', 'database/inserts/'.$db_target.'/'.$currenttable.'.sql');
		say($colors, "\t\t\t".'cat ../het2_rev5-6-'.$db_target.'.sql  | grep "INSERT INTO \`'.$currenttable.'\` VALUES "| cut -c-100 ;','');
		$said=@exec('cat ../het2_rev5-6-'.$db_target.'.sql  | grep "INSERT INTO \`'.$currenttable.'\` VALUES " | cut -c-100');

		$target_sql_file = 'database/inserts/'.$db_target.'/'.$currenttable.'.sql';
		$said=@exec('touch '. $target_sql_file);

		$said=@exec('echo "\n SET FOREIGN_KEY_CHECKS = 0; \n"   >'. $target_sql_file);
		$said=@exec('echo "\n TRUNCATE `'.$currenttable.'`; \n"   >'. $target_sql_file);
		
		$said=@exec('cat ../het2_rev5-6-'.$db_target.'.sql  | grep "INSERT INTO \`'.$currenttable.'\` VALUES " > '. $target_sql_file);
		$said=@exec('echo "\n SET FOREIGN_KEY_CHECKS = 1; \n"   >'. $target_sql_file);

		
		say($colors, "   inserted:", $said); 

} //end foearch 

$endtime = Carbon::now();

say($colors, "\n\nGenerated on ", $endtime->formatLocalized('%A %d %B %Y'));
say($colors, "Generated in ", $endtime->diffInMinutes($starttime) . ' minutes');
say($colors, "Generated in ", $endtime->diffInSeconds($starttime) . ' seconds');
$said=@exec(" paplay boy.ogg ");

#11 minutes Generations Time 2015 May 15
// dump($types);