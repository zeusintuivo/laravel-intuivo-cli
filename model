#!/usr/bin/env php
<?php
# @author Jesus Alcaraz <jesus@gammpartners.com>
#
# Procedural Programming to Create 
# Models, Migrations, Controllers, and Tests, 
# 
#


//
//
//
// Step 1 Check Arguments
//
//
//

# Before Loading anything Check Arguments Passed
# Get argv 
if (!isset($argv) || !isset($argv[1])) {
	echo "
	Sample Usage:    - expects only one Dir not more
	    call model Person\PersonAddress
	    call model Person/PersonAddress
	    call model PersonAddress
	    ";

	die(0);
}

/**
 * Sample Usage
 * $argv[1] = changeSlash($argv[1] );
 * 
 */
function changeSlash($que) {
	if (stripos($que, "\\") > 0) {
		$que = str_replace('\\', '/', $que);
	}
	return $que; 
}



//
//
//
//
//
// Step 2. Load Laravel Kernel Basic app
//
//
//
//
//
//
$input = "";
$status = "";
$kernel = "";
$app = "";
function createApplication() {
	require __DIR__.'/bootstrap/autoload.php';

	$app = require_once __DIR__.'/bootstrap/app.php';
	
	$kernel = $app->make('Illuminate\Contracts\Console\Kernel');

	$input = new Symfony\Component\Console\Input\ArgvInput;


	return $kernel;
}
$app = createApplication();

//
//
// Load String Files
//
//
use Illuminate\Support\Pluralizer;
use Illuminate\Support\Str;
	//LOAD TEST
	// echo Pluralizer::plural("PersonStatus"),"\n";
	// echo Str::snake("PersonStatus"),"\n";	
	// $argv[1] = changeSlash($argv[1] );
	// echo Pluralizer::plural($argv[1]),"\n";
	// echo Str::snake($argv[1]),"\n";
	// die();

//
//
//
// Wrap snake function 
//
//
function camelToUnderScore($name) {
	return Str::snake($name);
}




//
//
//
// Load Colors Script
//
//
//
require "Colors";

function replace(Colors $colors, $file, $find, $replace_with) {
	say($colors, "Reading File to Change", $file);
	if (!file_exists($file)) { 

		err($colors, "File was not found:", $file);
		return;
	}
	$contents = file_get_contents($file);
	$contents = str_replace($find,  $replace_with, $contents);
	file_put_contents($file, $contents);
}

//
//
//
//
//
// Load scripts for author and email 
//
//
//
//

$name= exec('git config user.name');
$email= exec('git config user.email');
$author="$name <$email>";

//
//
// 
// Change \ to /  from argument
//
//
//
$argv[1] = changeSlash($argv[1] );

// Pass Argument "Person/PersonThing" to $entity variable
$entity = $argv[1];

//
//
//
//
// Obtain, plural, camel case ( snake case ), file and dir from request
//
//
//
//

$file =""; //singular for model 
$dir = ""; //for the mkdirs in the controllers, and tests
$file_plural = ""; //plural for the migrations 
$file_plural_snake = ""; //plural snake for the migrations 

if (stripos($argv[1], "/") > 0) {
	$file_exploded = explode("/", $argv[1]);
	$file = $file_exploded[1];
	$dir = $file_exploded[0];
}

$file_plural=Pluralizer::plural($file);
$file_plural_snake_migration_name =  camelToUnderScore($file_plural);


//NaME CHANGE TEST
echo $file."\n";
echo $dir. "\n";
echo $file_plural. "\n";
// echo $file_plural_snake. "\n";

$filo = Str::snake($file);
echo $filo ."\n";

$file_plural_snake  =  Pluralizer::plural($filo);
echo $file_plural_snake ."\n";
echo $file_plural_snake_migration_name ."\n";
// die();


//REF: http://symfony.com/doc/current/components/console/introduction.html
use Symfony\Component\Console\Output\ConsoleOutput;
use Symfony\Component\Console\Output\Output;

/*
Verbosity Levels
Mode	Value
OutputInterface::VERBOSITY_QUIET	Do not output any messages
OutputInterface::VERBOSITY_NORMAL	The default verbosity level
OutputInterface::VERBOSITY_VERBOSE	Increased verbosity of messages
OutputInterface::VERBOSITY_VERY_VERBOSE	Informative non essential messages
OutputInterface::VERBOSITY_DEBUG	Debug messages
// $output = new ConsoleOutput(Output::VERBOSITY_QUIET, true);
*/

$output = new ConsoleOutput();

// TEST CONSOLE SAMPLE USE
// green text
// $output->writeln('<info>foo</info>');

// // yellow text
// $output->writeln('<comment>foo</comment>');

// // black text on a cyan background
// $output->writeln('<question>foo</question>');

// // white text on a red background
// $output->writeln('<error>foo</error>');

// green text
// $output->writeln('<fg=green>foo</fg=green>');

// // black text on a cyan background
// $output->writeln('<fg=black;bg=cyan>foo</fg=black;bg=cyan>');

// // bold text on a yellow background
// $output->writeln('<bg=yellow;options=bold>foo</bg=yellow;options=bold>');
 // die(0);


$description = "PHIWeb";
$revision = "7";
$version = "7";
$camelToUnderScoreFile = camelToUnderScore($file);

function replaceStrs($text) {
	// $subject = str_ireplace( $search,  $replace,  $subject);
	$return = "";
	$return  = str_ireplace( "{{dir}}",  $dir,  $text);
	$return  = str_ireplace( "{{file}}",  $file,  $return);
	$return  = str_ireplace( "{{camelToUnderScoreFile}}",  $camelToUnderScoreFile,  $return);
	$return  = str_ireplace( '{{author}}', $author,  $return);
	$return  = str_ireplace( '{{revision}}', $revision,  $return);
	$return  = str_ireplace( '{{version}}', $version,  $return);
	return 
}

#
#
#
#
# Creation Start
#
#
#
#

# Find migration file ad remove if an duplicated one

$migration_file=@exec('ls database/migrations/*_'.$file_plural_snake.'_table.php');
if ( file_exists($migration_file)) {
	$said = @exec('rm '.$migration_file);
	$said = @exec('git rm '.$migration_file);
	say($colors, "Migration Removed", $migration_file. "\n-". $said);
}

#
#
#
#
# Model - Generates Migration too
#
#
#
# *Model is singular and the base for the other names

$said = exec('php "artisan" make:model Models/'.$entity);
say($colors, "Model", $said);


# Place author's name in the Model
# sample test -> find app/Models -type f -print0 | xargs -0 sed -i 's/{{author}}/"{{author}}"/g'
replace($colors, "app/Models/".$entity.".php", '{{author}}', $author);
replace($colors, "app/Models/".$entity.".php", 'Created for PHIWeb', "Model created for ". $description);
replace($colors, "app/Models/".$entity.".php", '{{version}}', $version);
replace($colors, "app/Models/".$entity.".php", '{{revision}}', $revision);


#
#
#
# Migration
#
#
#

# Find migration file 
$migration_file = @exec('ls database/migrations/*_'.$file_plural_snake.'_table.php');

say($colors, "Migration", $migration_file);

# Place author's name in the Migration
replace($colors, $migration_file, '{{author}}', $author);
replace($colors, $migration_file, '{{dir}}', $dir);
replace($colors, $migration_file, '{{file}}', $file);
replace($colors, $migration_file, '{{revision}}', $revision);
replace($colors, $migration_file, '{{version}}', $version);
replace($colors, $migration_file, 'Created for PHIWeb', "Migration created for ". $description);

#
#
#
# Controller
#
#
#

$said = exec('php "artisan" make:controller '.$entity.'Controller');
say($colors, "Controller", $said);

# Place author's name in the Controller

replace($colors, "app/Http/Controllers/".$entity."Controller.php", '{{author}}', $author);
replace($colors, "app/Http/Controllers/".$entity."Controller.php", 'Created for PHIWeb', "Controller created for ". $description);
replace($colors, "app/Http/Controllers/".$entity."Controller.php", '{{revision}}', $revision);
replace($colors, "app/Http/Controllers/".$entity."Controller.php", '{{version}}', $version);



#
#
#
# Request
#
#
#
$request_name = $dir.'/Create'.$file.'Request';

$said = exec('php "artisan" make:request '.$request_name);
say($colors, "Request", $said);

# Place author's name in the Controller

replace($colors, "app/Http/Requests/".$request_name.".php", '{{author}}', $author);
replace($colors, "app/Http/Requests/".$request_name.".php", 'Created for PHIWeb', "Request created for Create ".$description);
replace($colors, "app/Http/Requests/".$request_name.".php", '{{revision}}', $revision);
replace($colors, "app/Http/Requests/".$request_name.".php", '{{version}}', $version);




$request_name = $dir.'/Delete'.$file.'Request';

$said = exec('php "artisan" make:request '.$request_name);
say($colors, "Request", $said);

# Place author's name in the Controller

replace($colors, "app/Http/Requests/".$request_name.".php", '{{author}}', $author);
replace($colors, "app/Http/Requests/".$request_name.".php", 'Created for PHIWeb', "Request created for Delete ".$description);
replace($colors, "app/Http/Requests/".$request_name.".php", '{{revision}}', $revision);
replace($colors, "app/Http/Requests/".$request_name.".php", '{{version}}', $version);




#
#
#
#
# Seed
#
#
#
say($colors, "Seed", "Creating Seed");
//Run Windows Command and ignore output to screen 
$said = @exec('seedTemplate '.$entity);
//Alternative for Linux
if ($said=="") {  
	$said = @exec('./seedTemplate '.$entity);

} 
say($colors, "Seed", $said);

# Place author's name in the Seed takes place in the same script




#
#
#
#
# Tests
#
#
#
#
// how to run a test exec('vendor/bin/phpunit tests/Models/'.$entity);

function generateFromStub($base_folder, $stub_File, $target_file, $dir, $file){

	$file_targeted = $base_folder."/".$dir."/".$file."/".$target_file;

	@mkdir($base_folder);
	@mkdir($base_folder."/".$dir);
	@mkdir($base_folder."/".$dir."/".$file);

	exec("touch ".$file_targeted);

	$template = file_get_contents($stub_file);
	$template = replaceStrs($template);

	file_put_contents($file_targeted, $template);
}


#
#
#
#
# Tests - Model
#
#
#
#
$base_folder = "tests/models";
$target_file = "basic_".$camelToUnderScoreFile."_model_test.php";
$stub_file = "app/Stubs/Tests/models/model_test.stub";

generateFromStub($base_folder, $stub_File, $target_file, $dir, $file);

$target_file = "delete_".$camelToUnderScoreFile."_model_test.php";
$stub_file = "app/Stubs/Tests/models/delete_model_test.stub";

generateFromStub($base_folder, $stub_File, $target_file, $dir, $file);

$target_file = "create_".$camelToUnderScoreFile."_model_test.php";
$stub_file = "app/Stubs/Tests/models/create_model_test.stub";

generateFromStub($base_folder, $stub_File, $target_file, $dir, $file);


#
#
#
#
# Tests - controller
#
#
#
#

$base_folder = "tests/controllers";
$target_file = "basic_".$camelToUnderScoreFile."controller_test.php";
$stub_file = "app/Stubs/Tests/controllers/controller_test.stub";

generateFromStub($base_folder, $stub_File, $target_file, $dir, $file);



#
#
#
#
#
# Tests - Request
#
#
#
#


$base_folder = "tests/requests";
$target_file = "basic_".$camelToUnderScoreFile."request_test.php";
$stub_file = "app/Stubs/Tests/requests/request_test.stub";

generateFromStub($base_folder, $stub_File, $target_file, $dir, $file);



#
#
#
#
# Tests - migration
#
#
#
#

$base_folder = "tests/migration";
$target_file = "basic_".$camelToUnderScoreFile."migration_test.php";
$stub_file = "app/Stubs/Tests/migrations/migration_test.stub";;

generateFromStub($base_folder, $stub_File, $target_file, $dir, $file);




#
#
#
#
# Tests - route
#
#
#
#

$base_folder = "tests/routes";
$target_file = "basic_".$camelToUnderScoreFile."route_test.php";
$stub_file = "app/Stubs/Tests/routes/route_test.stub";;

generateFromStub($base_folder, $stub_File, $target_file, $dir, $file);

#
#
#
#
# Tests - view
#
#
#
#

$base_folder = "tests/views";
$target_file = "basic_".$camelToUnderScoreFile."view_test.php";
$stub_file = "app/Stubs/Tests/views/view_test.stub";;

generateFromStub($base_folder, $stub_File, $target_file, $dir, $file);


#
#
#
#
# Commit to Github
#
#
#
#
say($colors, "\n\nAdd", "Add files to git");

$said=@exec("git add . ");

$commit_msg = ("Created ". $file. " Model, Controller, Request, Migration, Seeder, and Tests for View, Route, Migration, Model, Controller and Request");

say($colors, "\n\nCommit", $commit_msg);

$said=@exec('git commit -m "'. $commit_msg .'"');

$said=@exec ("git status");
