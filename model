#!/usr/bin/env php
<?php
# @author Jesus Alcaraz <jesus@gammapartners.com>
#
# Procedural Programming to Create 
# Models, Migrations, Controllers, and Tests, 
# 
#

//
//
//
// Step 1 Check Arguments
//
//
//

# Before Loading anything Check Arguments Passed
# Get argv 
$valid_model_types=[ "nothing", "plain", "simple", "report", "softdelete", "softdeleteparent", "softdeletechild", "pivot"];
$model_type=$valid_model_types[3];  /// simple|softdelete
$USAGE = " \033[38;5;226m 
	Sample Usage:    - expects one or more arguments
	    call model Person\PersonAddress [optional]
	    call model Person/PersonAddress [optional]
	    call model PersonAddress [optional]

	    For reports
	            model/  modelname                          type    who 
	    model DailyLog/DailyLog_1015_Report_HealthStudents report staff
	  ./model DailyLog/DailyLog_1015_Report_HealthStudents report staff

	    [optional] can be:

	    	- " . implode("\n	    	- ", $valid_model_types) ."

	    	- ".$model_type." is default if ommited [optional]
\n";
if (!isset($argv) || !isset($argv[1])) {
		die($USAGE);
}
if (isset($argv[2]) ) {
	$model_type = trim($argv[2]);
}
$who = "{{WHO}}";

if (isset($argv[3]) ) {
	$who = trim($argv[3]);
}
include('generatebase');

if (!in_array($model_type , $valid_model_types)) {
	echo  "\n \033[38;5;196m  -- Error Unknown Usage: ".$model_type ."\n";
	die($USAGE);
}



#
#
#
#
# Creation Start
#
#
#
#
comment($colors, "- Migration - ", "");
say($colors, "", "");
darken($colors, "", "");
# Find migration file ad remove if an duplicated one
$migration_file = @exec('ls database/migrations/*_create_'.$file_plural_snake.'_table.php');
if ( file_exists($migration_file)) {
	$said = @exec('rm '.$migration_file);
	$said = @exec('git rm '.$migration_file);
	say($colors, "Migration Removed", $migration_file. "\n-". $said);
}


#
#
#
#
# Model - Generates Migration too
#
#
#
# *Model is singular and the base for the other names

comment($colors, "- Model - ", "$entity");
darken($colors, "", "");
//Write model and migration just to get a migration name out it 

$said = exec('php "artisan" make:model Models/'.$entity);
say($colors, "Model", $said);



# Place author's name in the Model
# sample test -> find app/Models -type f -print0 | xargs -0 sed -i 's/{{author}}/"{{author}}"/g'
replace($colors, "app/Models/".$entity.".php", '{{author}}', $author);
replace($colors, "app/Models/".$entity.".php", 'Created for PHIWeb', "Model created for ". $description);
replace($colors, "app/Models/".$entity.".php", '{{description}}', "Model created for ". $description);
replace($colors, "app/Models/".$entity.".php", '{{version}}', $version);
replace($colors, "app/Models/".$entity.".php", '{{revision}}', $revision);


#
# ReWrite Model with our my model stub
#
comment($colors, "- ReModel - ", "$entity");
darken($colors, "", "");
$replace_array["namespace"] = $replace_array["appName"]."\\Models\\".$replace_array["dir"];

$base_folder = "app/Models";
$target_file = $entity.".php";
$stub_file = "app/Stubs/Foundation/Console/stubs/model.$model_type.stub";

$file_targeted = generateFromStub($replace_array, $base_folder, $stub_file, $target_file, $dir, $file, $colors, " model for ");





#
#
#
# Migration - Delete migration if exists
#
#
#
comment($colors, "- ReMigration - ", "$migration_file ");
darken($colors, "", "");
#
# Find migration. Erase. Keep the name
#
$migration_file = @exec('ls database/migrations/*_create_'.$file_plural_snake.'_table.php');

if ( file_exists($migration_file)) {
	$said = @exec('rm '.$migration_file);
	$said = @exec('git rm '.$migration_file);
	darken($colors, "Migration Removed", $migration_file. "\n-". $said);
}



#
# ReWrite Migration with our my migartion stub
#

$migration_file = preg_replace('/database\/migrations\//i', "", $migration_file);

$replace_array["namespace"] = $replace_array["appName"]."\\migrations\\".$replace_array["dir"];

$base_folder = "database/migrations";
$target_file = $migration_file;
$stub_file = "app/Stubs/Database/Migrations/stubs/create.$model_type.stub";

$file_targeted = generateFromStub($replace_array, $base_folder, $stub_file, $target_file, $dir, $file, $colors, " migration for ");




/*
say($colors, "Migration", $migration_file);

# Place author's name in the Migration
replace($colors, $migration_file, '{{author}}', $author);
replace($colors, $migration_file, '{{dir}}', $dir);
replace($colors, $migration_file, '{{file}}', $file);
replace($colors, $migration_file, '{{revision}}', $revision);
replace($colors, $migration_file, '{{version}}', $version);
replace($colors, $migration_file, 'Created for PHIWeb', "Migration created for ". $description);
*/

#
#
#
# Controller
#
#
#

/*
$said = exec('php "artisan" make:controller '.$entity.'Controller');
say($colors, "Controller", $said);

# Place author's name in the Controller

replace($colors, "app/Http/Controllers/".$entity."Controller.php", '{{author}}', $author);
replace($colors, "app/Http/Controllers/".$entity."Controller.php", 'Created for PHIWeb', "Controller created for ". $description);
replace($colors, "app/Http/Controllers/".$entity."Controller.php", '{{revision}}', $revision);
replace($colors, "app/Http/Controllers/".$entity."Controller.php", '{{version}}', $version);
*/

# 
# Controller with our stub
#
comment($colors, "- Controller - ", "$migration_file ");
darken($colors, "", "");
$replace_array["namespace"] = $replace_array["appName"]."\\Http\\Controllers\\".$replace_array["dir"];

$base_folder = "app/Http/Controllers";
$target_file = $entity.'Controller.php';
$stub_file = "app/Stubs/Routing/Console/stubs/controller.$model_type.stub";

$file_targeted = generateFromStub($replace_array, $base_folder, $stub_file, $target_file, $dir, $file, $colors, " controller for ");



#
#
#
# Requests
#
#
#
/*
$request_name = $dir.'/Create'.$file.'Request';

$said = exec('php "artisan" make:request '.$request_name);
say($colors, "Request", $said);

# Place author's name in the Controller

replace($colors, "app/Http/Requests/".$request_name.".php", '{{author}}', $author);
replace($colors, "app/Http/Requests/".$request_name.".php", 'Created for PHIWeb', "Request created for Create ".$description);
replace($colors, "app/Http/Requests/".$request_name.".php", '{{revision}}', $revision);
replace($colors, "app/Http/Requests/".$request_name.".php", '{{version}}', $version);
*/

#
# Create Request with our stub
#
$replace_array["namespace"] = $replace_array["appName"]."\\Http\\Requests\\".$replace_array["dir"];

$base_folder = "app/Http/Requests";
$target_file = $dir.'/Create'.$file.'Request.php';
$stub_file = "app/Stubs/Foundation/Console/stubs/request-create.$model_type.stub";

$file_targeted = generateFromStub($replace_array, $base_folder, $stub_file, $target_file, $dir, $file, $colors, " Create Request for ");


/*
$request_name = $dir.'/Delete'.$file.'Request';

$said = exec('php "artisan" make:request '.$request_name);
say($colors, "Request", $said);

# Place author's name in the Controller

replace($colors, "app/Http/Requests/".$request_name.".php", '{{author}}', $author);
replace($colors, "app/Http/Requests/".$request_name.".php", 'Created for PHIWeb', "Request created for Delete ".$description);
replace($colors, "app/Http/Requests/".$request_name.".php", '{{revision}}', $revision);
replace($colors, "app/Http/Requests/".$request_name.".php", '{{version}}', $version);
*/
$base_folder = "app/Http/Requests";
$target_file = $dir.'/Delete'.$file.'Request.php';
$stub_file = "app/Stubs/Foundation/Console/stubs/request-delete.$model_type.stub";

$file_targeted = generateFromStub($replace_array, $base_folder, $stub_file, $target_file, $dir, $file, $colors, " Delete Request for ");



#
#
#
#
# Seed
#
#
#


$base_folder = "database/seeds";
$target_file = $entity.'Seeder.php';
$stub_file = "app/Stubs/Database/Seeds/stubs/seed.$model_type.stub";

$file_targeted = generateFromStub($replace_array, $base_folder, $stub_file, $target_file, $dir, $file, $colors, " seed for ");

/*
$replace_array["namespace"] = $replace_array["appName"]."\\database\\seeds\\".$replace_array["dir"];

say($colors, "Seed", "Creating Seed");
//Run Windows Command and ignore output to screen 
$said = @exec('seedTemplate '.$entity);
//Alternative for Linux
if ($said=="") {  
	$said = @exec('./seedTemplate '.$entity);

} 
say($colors, "Seed", $said);
*/
# Place author's name in the Seed takes place in the same script


#
#
#
#
# Reports
#
#
#
$base_folder = "database/reports";
$target_file =  $dir . '/'. $filo.'_report.sql';
@mkdir($base_folder);
@mkdir($base_folder."/".$dir);
$file_targeted = $base_folder."/".$target_file;
exec("touch ".$file_targeted);


#
#
#
#
# Stored Procedures
#
#
#
$base_folder = "database/sp";
$target_file =  $dir.'/usp_'.$filo.'.sql';


@mkdir($base_folder);
@mkdir($base_folder."/".$dir);
$file_targeted = $base_folder."/".$target_file;
exec("touch ".$file_targeted);



#
#
#
#
# Tests
#
#
#
#


#
#
#
#
# Tests - Model
#
#
#
#
$said=@exec("php 'testexists' $dir/$file");
if ($model_type=='softdelete') {
	$said=@exec("php 'testmodel' $dir/$file");
	$said=@exec("php 'testdelete' $dir/$file");
}

#
#
#
#
# Tests - controller
#
#
#
#
// $said=@exec("php 'testcontroller' $dir/$file");


#
#
#
#
#
# Tests - Request
#
#
#
#

/*
$base_folder = "tests/requests";
$target_file = "basic_".$camelToUnderScoreFile."_request_test.php";
$stub_file = "app/Stubs/Tests/requests/request_test.stub";

$file_targeted = generateFromStub($replace_array, $base_folder, $stub_file, $target_file, $dir, $file, $colors);
*/




#
#
#
#
# Tests - migration
#
#
#
#

/*
$base_folder = "tests/migration";
$target_file = "basic_".$camelToUnderScoreFile."_migration_test.php";
$stub_file = "app/Stubs/Tests/migrations/migration_test.stub";;

$file_targeted = generateFromStub($replace_array, $base_folder, $stub_file, $target_file, $dir, $file, $colors);
*/





#
#
#
#
# Tests - route
#
#
#
#

/*
$base_folder = "tests/routes";
$target_file = "basic_".$camelToUnderScoreFile."_route_test.php";
$stub_file = "app/Stubs/Tests/routes/route_test.stub";;

$file_targeted = generateFromStub($replace_array, $base_folder, $stub_file, $target_file, $dir, $file, $colors);
*/


#
#
#
#
# Tests - view
#
#
#
#

/*
$base_folder = "tests/views";
$target_file = "basic_".$camelToUnderScoreFile."_view_test.php";
$stub_file = "app/Stubs/Tests/views/view_test.stub";;

$file_targeted = generateFromStub($replace_array, $base_folder, $stub_file, $target_file, $dir, $file, $colors);
*/


#
#
#
#
# Trace Folders
#
#
#
#
if ($this_is_a_report==1) {

	#controller base
	$controller_base=".trace/".$filo_number."/-controller-/";
	$model_base=$controller_base.$file."_Controller.php/method\ @\ ctrlr_".$filo_number."_".$who."_".$unique_report_name_snake."/-model-/";
	$report_base=$model_base.$file.".php/method\ @\ 1.model_".$filo_number."_".$who."_".$unique_report_name_snake."/-db-/CALL\ final_rpt_".$filo_number."_".$who."_".$unique_report_name_snake;

	# intial folder
	$command="mkdir -p ".$report_base;
	$said=@exec('echo "'.$command.'" > .trace_gen');
	$said=@exec('echo " " >> .trace_gen');
	$said=@exec($command);



	# file inside folder so git considers it
	$command="touch ".$report_base."/result";
	$said=@exec('echo "'.$command.'" >> .trace_gen');
	$said=@exec('echo " " >> .trace_gen');
	$said=@exec($command);


	# read sp name assinged report
	$command="find database/sp -name \"".$filo_number."*.*\"";
	$said=@exec('echo "'.$command.'" >> .trace_gen');
	$said=@exec('echo " " >> .trace_gen');
	$sp_file=@exec($command);

	$arr = explode("/", $sp_file);
	// dump($arr);
	$dordir = $arr[2]."/". $arr[3];

	$command="mkdir -p .trace/".$filo_number."/-sql-/";
	$said=@exec('echo "'.$command.'" >> .trace_gen');
	$said=@exec('echo " " >> .trace_gen');
	$said=@exec($command);

	#link report loader sql
	$target_command = $sp_file;
		// if (file_exists($target_command)) unlink($target_command);
	$linkname_command = ".trace/".$filo_number."/-sql-/".$filo_number."_loader.sql";

    $command=("ln -s -T $target_command $linkname_command");
	$said=@exec('echo "'.$command.'" >> .trace_gen');
	$said=@exec('echo " " >> .trace_gen');
	// if (!file_exists($linkname_command)) $said=@exec($command);
	if (!file_exists($linkname_command))  symlink($target_command, $linkname_command);
	
	#
	#
	# 
	# link report sql work folder
	#
	#
	#
	$target_command = "database/reports/done/".$dordir."/".$unique_report_name;
		// if (file_exists($target_command)) unlink($target_command);
	$linkname_command = ".trace/".$filo_number."/-sql-/sql_work_".$unique_report_name;
    $command=("ln -s -T $target_command $linkname_command");
	// symlink($target_command, $linkname_command);

	$said=@exec('echo "'.$command.'" >> .trace_gen');
	$said=@exec('echo " " >> .trace_gen');
	// if (!file_exists($linkname_command))   $said=@exec($command);
	if (!file_exists($linkname_command))  symlink($target_command, $linkname_command);

	#link controller 
	$command=("find app/Http/Controllers/ -name \"*".$filo_number."*.*\"");
	$said=@exec('echo "'.$command.'" >> .trace_gen');
	$said=@exec('echo " " >> .trace_gen');
	$controller_file=@exec($command);
	
	$target_command = "../../../".$controller_file;
		// if (file_exists($target_command)) unlink($target_command);
	$linkname_command = $filo_number."_controller.php";
	$said=@exec('echo "cd '.$controller_base.'" >> .trace_gen');
	$said=@exec('echo "'.$command.'" >> .trace_gen');
	$said=@exec('echo "'.str_repeat("cd ..;", sizeof(explode("/", $controller_base))-1).'" >> .trace_gen');
	$said=@exec('echo " " >> .trace_gen');
	
	$current_dir = getcwd();
	chdir($controller_base);
	$command=("ln -s -T $target_command $linkname_command");
	if (!file_exists($linkname_command))  symlink($target_command, $linkname_command);
	// if (!file_exists($linkname_command))  $said=@exec($command);
	chdir($current_dir);

	#
	#
	#
	#
	# link model 
	#
	#
	#
	#
	$command=("find app/Models/ -name \"*".$filo_number."*.*\"");
	$said=@exec('echo "'.$command.'" >> .trace_gen');
	$said=@exec('echo " " >> .trace_gen');
	$model_file=@exec($command);


	$target_command = "../../../../../../".$model_file;
		// if (file_exists($target_command)) unlink($target_command);
	$linkname_command = $model_base.$filo_number."_model.php";
	// $said=@exec('echo "cd '.$model_base.'" >> .trace_gen');
	$command=("ln -s -T $target_command $linkname_command");
	$said=@exec('echo "'.$command.'" >> .trace_gen');
	// $said=@exec('echo "'.str_repeat("cd ..;", sizeof(explode("/", $model_base))-1).'" >> .trace_gen');
	$said=@exec('echo " " >> .trace_gen');

	// $current_dir = getcwd();
	// dump($model_base);
	// chdir($model_base);
	// $said=@exec('cd '.$model_base);
	// dd("die");
    // if (!file_exists($linkname_command))  symlink($target_command, $linkname_command);
	if (!file_exists($linkname_command))  $said=@exec($command);
	// chdir($current_dir);

}


#
#
#
#
# Commit to Github
#
#
#
#
/*
$commit_msg = ("Created ". $file. " Model, Controller, Request, Migration, Seeder, and Tests for View, Route, Migration, Model ( basic, create and delete ), Controller and Request");
commitToGithub(	 $colors, $commit_msg );
*/

