#!/usr/bin/env php
<?php
# @author Jesus Alcaraz <jesus@gammpartners.com>
#
# Procedural Programming to Create 
# Models, Migrations, Controllers, and Tests, 
# 
#

//
//
//
// Step 1 Check Arguments
//
//
//

# Before Loading anything Check Arguments Passed
# Get argv 
if (!isset($argv) || !isset($argv[1])) {
	echo "
	Sample Usage:    - expects only one Dir not more
	    call model Person\PersonAddress
	    call model Person/PersonAddress
	    call model PersonAddress
	    ";

	die(0);
}

include('generatebase');

#
#
#
#
# Creation Start
#
#
#
#

# Find migration file ad remove if an duplicated one

$migration_file=@exec('ls database/migrations/*_'.$file_plural_snake.'_table.php');
if ( file_exists($migration_file)) {
	$said = @exec('rm '.$migration_file);
	$said = @exec('git rm '.$migration_file);
	say($colors, "Migration Removed", $migration_file. "\n-". $said);
}

#
#
#
#
# Model - Generates Migration too
#
#
#
# *Model is singular and the base for the other names

$said = exec('php "artisan" make:model Models/'.$entity);
say($colors, "Model", $said);


# Place author's name in the Model
# sample test -> find app/Models -type f -print0 | xargs -0 sed -i 's/{{author}}/"{{author}}"/g'
replace($colors, "app/Models/".$entity.".php", '{{author}}', $author);
replace($colors, "app/Models/".$entity.".php", 'Created for PHIWeb', "Model created for ". $description);
replace($colors, "app/Models/".$entity.".php", '{{version}}', $version);
replace($colors, "app/Models/".$entity.".php", '{{revision}}', $revision);


#
#
#
# Migration
#
#
#

# Find migration file 
$migration_file = @exec('ls database/migrations/*_'.$file_plural_snake.'_table.php');

say($colors, "Migration", $migration_file);

# Place author's name in the Migration
replace($colors, $migration_file, '{{author}}', $author);
replace($colors, $migration_file, '{{dir}}', $dir);
replace($colors, $migration_file, '{{file}}', $file);
replace($colors, $migration_file, '{{revision}}', $revision);
replace($colors, $migration_file, '{{version}}', $version);
replace($colors, $migration_file, 'Created for PHIWeb', "Migration created for ". $description);

#
#
#
# Controller
#
#
#

$said = exec('php "artisan" make:controller '.$entity.'Controller');
say($colors, "Controller", $said);

# Place author's name in the Controller

replace($colors, "app/Http/Controllers/".$entity."Controller.php", '{{author}}', $author);
replace($colors, "app/Http/Controllers/".$entity."Controller.php", 'Created for PHIWeb', "Controller created for ". $description);
replace($colors, "app/Http/Controllers/".$entity."Controller.php", '{{revision}}', $revision);
replace($colors, "app/Http/Controllers/".$entity."Controller.php", '{{version}}', $version);



#
#
#
# Request
#
#
#
$request_name = $dir.'/Create'.$file.'Request';

$said = exec('php "artisan" make:request '.$request_name);
say($colors, "Request", $said);

# Place author's name in the Controller

replace($colors, "app/Http/Requests/".$request_name.".php", '{{author}}', $author);
replace($colors, "app/Http/Requests/".$request_name.".php", 'Created for PHIWeb', "Request created for Create ".$description);
replace($colors, "app/Http/Requests/".$request_name.".php", '{{revision}}', $revision);
replace($colors, "app/Http/Requests/".$request_name.".php", '{{version}}', $version);




$request_name = $dir.'/Delete'.$file.'Request';

$said = exec('php "artisan" make:request '.$request_name);
say($colors, "Request", $said);

# Place author's name in the Controller

replace($colors, "app/Http/Requests/".$request_name.".php", '{{author}}', $author);
replace($colors, "app/Http/Requests/".$request_name.".php", 'Created for PHIWeb', "Request created for Delete ".$description);
replace($colors, "app/Http/Requests/".$request_name.".php", '{{revision}}', $revision);
replace($colors, "app/Http/Requests/".$request_name.".php", '{{version}}', $version);




#
#
#
#
# Seed
#
#
#
say($colors, "Seed", "Creating Seed");
//Run Windows Command and ignore output to screen 
$said = @exec('seedTemplate '.$entity);
//Alternative for Linux
if ($said=="") {  
	$said = @exec('./seedTemplate '.$entity);

} 
say($colors, "Seed", $said);

# Place author's name in the Seed takes place in the same script




#
#
#
#
# Tests
#
#
#
#


#
#
#
#
# Tests - Model
#
#
#
#
$said=@exec("php 'testexists' $dir/$file");
$said=@exec("php 'testmodel' $dir/$file");


#
#
#
#
# Tests - controller
#
#
#
#
// $said=@exec("php 'testcontroller' $dir/$file");


#
#
#
#
#
# Tests - Request
#
#
#
#


$base_folder = "tests/requests";
$target_file = "basic_".$camelToUnderScoreFile."_request_test.php";
$stub_file = "app/Stubs/Tests/requests/request_test.stub";

$file_targeted = generateFromStub($replace_array, $base_folder, $stub_file, $target_file, $dir, $file, $colors);





#
#
#
#
# Tests - migration
#
#
#
#

$base_folder = "tests/migration";
$target_file = "basic_".$camelToUnderScoreFile."_migration_test.php";
$stub_file = "app/Stubs/Tests/migrations/migration_test.stub";;

$file_targeted = generateFromStub($replace_array, $base_folder, $stub_file, $target_file, $dir, $file, $colors);






#
#
#
#
# Tests - route
#
#
#
#

$base_folder = "tests/routes";
$target_file = "basic_".$camelToUnderScoreFile."_route_test.php";
$stub_file = "app/Stubs/Tests/routes/route_test.stub";;

$file_targeted = generateFromStub($replace_array, $base_folder, $stub_file, $target_file, $dir, $file, $colors);



#
#
#
#
# Tests - view
#
#
#
#

$base_folder = "tests/views";
$target_file = "basic_".$camelToUnderScoreFile."_view_test.php";
$stub_file = "app/Stubs/Tests/views/view_test.stub";;

$file_targeted = generateFromStub($replace_array, $base_folder, $stub_file, $target_file, $dir, $file, $colors);




#
#
#
#
# Commit to Github
#
#
#
#

$commit_msg = ("Created ". $file. " Model, Controller, Request, Migration, Seeder, and Tests for View, Route, Migration, Model ( basic, create and delete ), Controller and Request");
commitToGithub(	 $colors, $commit_msg );


